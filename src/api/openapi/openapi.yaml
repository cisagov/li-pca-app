---
openapi: 3.0.0
info:
  title: li-pca-api
  description: |
    Li-PCA Application API Endpoints
  version: 1.0.0
externalDocs:
  url: https://app.swaggerhub.com/apis-docs/Li-PCA/li-pca-api/1.0.0
  description: Swagger Hosted Docs
servers:
  - url: https://localhost:8080/li-pca
    description: li-pca-api
tags:
  - name: auth
    description: Li-PCA Authentication
  - name: customers
    description: Li-PCA Customers
  - name: assessments
    description: Li-PCA Assessments
  - name: campaigns
    description: Li-PCA Campaigns
  - name: templates
    description: Li-PCA Templates
  - name: documents
    description: Li-PCA Reports
  - name: sending_profiles
    description: Li-PCA Sending Profiles
  - name: domains
    description: Li-PCA Domains
paths:
  /v1/assessments:
    get:
      tags:
        - assessments
      summary: Finds Assessments by status
      description: Multiple status value entries with comma separated strings
      operationId: get_all_assessments
      parameters:
        - name: customer_uuid
          in: query
          description: Assessment uuid filter
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Assessment'
                x-content-type: application/json
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Assessment'
        "400":
          description: Invalid status value
      x-openapi-router-controller: api.controllers.assessments_controller
    post:
      tags:
        - assessments
      summary: Add a new assessment to the data store
      operationId: create_assessment
      requestBody:
        $ref: '#/components/requestBodies/Assessment'
      responses:
        "405":
          description: Invalid input
      x-openapi-router-controller: api.controllers.assessments_controller
  /v1/assessments/{uuid}:
    get:
      tags:
        - assessments
      summary: Find assessment by uuid
      description: Returns a single assessment
      operationId: get_assessment_by_uuid
      parameters:
        - name: uuid
          in: path
          description: uuid of assessment to return
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid4
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assessment'
            application/xml:
              schema:
                $ref: '#/components/schemas/Assessment'
        "400":
          description: Invalid ID supplied
        "404":
          description: Assessment not found
      x-openapi-router-controller: api.controllers.assessments_controller
    put:
      tags:
        - assessments
      summary: Update an existing assessment
      operationId: update_assessment_by_uuid
      parameters:
        - name: uuid
          in: path
          description: uuid of assessment to update
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid4
      requestBody:
        $ref: '#/components/requestBodies/Assessment'
      responses:
        "400":
          description: Invalid uuid supplied
        "404":
          description: Assessment not found
        "405":
          description: Validation exception
      x-openapi-router-controller: api.controllers.assessments_controller
    delete:
      tags:
        - assessments
      summary: Deletes an assessment
      operationId: delete_assessment_by_uuid
      parameters:
        - name: uuid
          in: path
          description: uuid to delete
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid4
      responses:
        "400":
          description: Invalid uuid supplied
        "404":
          description: Assessment not found
      x-openapi-router-controller: api.controllers.assessments_controller
  /v1/customers:
    get:
      tags:
        - customers
      summary: Find all customers
      description: Multiple status filters by adding separated strings
      operationId: get_all_customers
      parameters:
        - name: name
          in: query
          description: Customer name filter
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
                x-content-type: application/json
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        "400":
          description: Invalid id supplied
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponse'
                x-content-type: application/json
        "404":
          description: Assessment not found
        "405":
          description: Validation exception
      x-openapi-router-controller: api.controllers.customers_controller
    post:
      x-openapi-router-controller: api.controllers.customers_controller
      tags:
        - customers
      operationId: create_customer
      requestBody:
        description: Created customer object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
            application/xml:
              schema:
                $ref: '#/components/schemas/Customer'
  /v1/customers/{uuid}:
    get:
      tags:
        - customers
      summary: Find customer by uuid
      description: Returns a single customer
      operationId: get_customer_by_uuid
      parameters:
        - name: uuid
          in: path
          description: uuid of customer to update
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
            application/xml:
              schema:
                $ref: '#/components/schemas/Customer'
        "400":
          description: Invalid uuid supplied
        "404":
          description: Customer not found
      x-openapi-router-controller: api.controllers.customers_controller
    put:
      summary: Updated Customer
      description: Update customer by uuid
      operationId: update_customer_by_uuid
      parameters:
        - name: uuid
          in: path
          description: uuid that needs to be updated
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: Updated customer object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        "400":
          description: Invalid Customer supplied
        "404":
          description: Customer not found
      x-openapi-router-controller: api.controllers.customers_controller
    delete:
      tags:
        - customers
      summary: Deletes a customer
      operationId: delete_customer_by_uuid
      parameters:
        - name: uuid
          in: path
          description: uuid that needs to be updated
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        default:
          description: successful operation
      x-openapi-router-controller: api.controllers.customers_controller
  /v1/templates:
    get:
      tags:
        - templates
      summary: Find all templates
      description: |
        Multiple status values can be provided with comma separated strings
      operationId: get_all_templates
      parameters:
        - name: name
          in: query
          description: template name filter
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Template'
                x-content-type: application/json
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Template'
        "400":
          description: Invalid name value
      x-openapi-router-controller: api.controllers.templates_controller
    post:
      tags:
        - templates
      operationId: create_template
      requestBody:
        description: Created template object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Template'
        required: true
      responses:
        default:
          description: successful operation
      x-openapi-router-controller: api.controllers.templates_controller
  /v1/templates/{uuid}:
    get:
      tags:
        - templates
      summary: Find template by uuid
      description: Returns a single template
      operationId: get_template_by_uuid
      parameters:
        - name: uuid
          in: path
          description: uuid of template to return
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid4
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
            application/xml:
              schema:
                $ref: '#/components/schemas/Template'
        "400":
          description: Invalid ID supplied
        "404":
          description: template not found
      x-openapi-router-controller: api.controllers.templates_controller
    put:
      tags:
        - templates
      summary: Update an existing template
      operationId: update_template_by_uuid
      parameters:
        - name: uuid
          in: path
          description: uuid of template to update
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid4
      requestBody:
        description: Updated template object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Template'
      responses:
        "400":
          description: Invalid uuid supplied
        "404":
          description: template not found
        "405":
          description: Validation exception
      x-openapi-router-controller: api.controllers.templates_controller
    delete:
      tags:
        - templates
      summary: Deletes a template
      operationId: delete_template_by_uuid
      parameters:
        - name: uuid
          in: path
          description: uuid to delete
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid4
      responses:
        "400":
          description: Invalid uuid supplied
        "404":
          description: template not found
      x-openapi-router-controller: api.controllers.templates_controller
  /v1/templates/bulk:
    put:
      tags:
        - templates
      summary: Update an existing template
      operationId: bulk_update_templates
      requestBody:
        description: Bulk Update template object
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Template'
      responses:
        "400":
          description: Invalid request supplied
        "404":
          description: template not found
        "405":
          description: Validation exception
      x-openapi-router-controller: api.controllers.templates_controller
  /v1/campaigns:
    get:
      tags:
        - campaigns
      summary: Find all campaigns
      description: |
        Multiple status values can be provided with comma separated strings
      operationId: get_all_campaigns
      parameters:
        - name: name
          in: query
          description: campaign name filter
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Campaign'
                x-content-type: application/json
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Campaign'
        "400":
          description: Invalid name value
        "404":
          description: Campaign not found
        "405":
          description: Validation Exception
      x-openapi-router-controller: api.controllers.campaigns_controller
    post:
      tags:
        - campaigns
      summary: Add a new campaign to the data store
      operationId: create_campaign
      requestBody:
        description: Created campaign object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Campaign'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'
            application/xml:
              schema:
                $ref: '#/components/schemas/Campaign'
      x-openapi-router-controller: api.controllers.campaigns_controller
  /v1/campaigns/{uuid}:
    get:
      tags:
        - campaigns
      summary: Find campaign by uuid
      description: Returns a single campaign
      operationId: get_campaign_by_uuid
      parameters:
        - name: uuid
          in: path
          description: uuid of campaign to return
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid4
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'
            application/xml:
              schema:
                $ref: '#/components/schemas/Campaign'
        "400":
          description: Invalid ID supplied
        "404":
          description: campaign not found
      x-openapi-router-controller: api.controllers.campaigns_controller
    put:
      tags:
        - campaigns
      summary: Update an existing campaign
      operationId: update_campaign_by_uuid
      parameters:
        - name: uuid
          in: path
          description: uuid of campaign to update
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid4
      requestBody:
        description: Updated campaign object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Campaign'
      responses:
        "400":
          description: Invalid uuid supplied
        "404":
          description: campaign not found
        "405":
          description: Validation exception
      x-openapi-router-controller: api.controllers.campaigns_controller
    delete:
      tags:
        - campaigns
      summary: Deletes a campaign
      operationId: delete_campaign_by_uuid
      parameters:
        - name: uuid
          in: path
          description: uuid to delete
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid4
      responses:
        "400":
          description: Invalid uuid supplied
        "404":
          description: campaign not found
      x-openapi-router-controller: api.controllers.campaigns_controller
  /v1/sending_profiles:
    get:
      tags:
        - sending_profiles
        - domains
      summary: Get all sending profiles (domains)
      description: Get All Sending Profiles (Domains)
      operationId: get_all_sending_profiles
      parameters:
        - name: name
          in: query
          description: Domain name filter
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sending_Profile'
                x-content-type: application/json
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sending_Profile'
        "400":
          description: Invalid ID supplied
        "404":
          description: Sending Profile not found
        "405":
          description: Validation Exception
      x-openapi-router-controller: api.controllers.sending_profiles_controller
    post:
      tags:
        - sending_profiles
        - domains
      summary: Add new sending profile to the data store
      operationId: create_sending_profile
      requestBody:
        description: created sending profile object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sending_Profile'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sending_Profile'
            application/xml:
              schema:
                $ref: '#/components/schemas/Sending_Profile'
      x-openapi-router-controller: api.controllers.sending_profiles_controller
  /v1/sending_profiles/{uuid}:
    get:
      tags:
        - sending_profiles
        - domains
      summary: Find sending profile by uuid
      description: returns a single sending profile
      operationId: get_sending_profile_by_uuid
      parameters:
        - name: uuid
          in: path
          description: uuid of sending profile to return
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sending_Profile'
            application/xml:
              schema:
                $ref:
                  '#/components/schemas/Sending_Profile'
        "400":
          description: Invalid ID supplied
        "404":
          description: sending profile not found
      x-openapi-router-controller: api.controllers.sending_profiles_controller
    put:
      tags:
        - sending_profiles
        - domains
      summary: Update an existing sending profile
      operationId: update_sending_profile_by_uuid
      parameters:
        - name: uuid
          in: path
          description: uuid of sending profile to update
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid64
      requestBody:
        description: Updated sending profile object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sending_Profile'
      responses:
        "400":
          description: Invalid uuid supplied
        "404":
          description: sending profile not found
        "405":
          description: Validation exception
      x-openapi-router-controller: api.controllers.sending_profiles_controller
    delete:
      tags:
        - sending_profiles
        - domains
      summary: Deletes a sending profile
      operationId: delete_sending_profile_by_uuid
      parameters:
        - name: uuid
          in: path
          description: uuid to delete
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid64
      responses:
        "400":
          description: Invalid uuid supplied
        "404":
          description: sending profile not found
      x-openapi-router-controller: api.controllers.sending_profiles_controller
  /v1/documents:
    get:
      tags:
        - documents
      summary: Find all campaigns
      description: Get All Documents
      operationId: get_all_documents
      parameters:
        - name: name
          in: query
          description: document name filter
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
                x-content-type: application/json
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
        "400":
          description: Invalid name value
      x-openapi-router-controller: api.controllers.documents_controller
    post:
      tags:
        - documents
      summary: Add a new document to the data store
      operationId: create_document
      requestBody:
        $ref: '#/components/requestBodies/Document'
      responses:
        "405":
          description: Invalid input
      x-openapi-router-controller: api.controllers.documents_controller
  /v1/documents/{uuid}:
    get:
      tags:
        - documents
      summary: Get document by uuid
      description: Returns a single document
      operationId: get_document_by_uuid
      parameters:
        - name: uuid
          in: path
          description: uuid of document to return
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid4
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
            application/xml:
              schema:
                $ref: '#/components/schemas/Document'
        "400":
          description: Invalid ID supplied
        "404":
          description: document not found
      x-openapi-router-controller: api.controllers.documents_controller
    put:
      tags:
        - documents
      summary: Update/Replace an existing document
      operationId: update_document_by_uuid
      parameters:
        - name: uuid
          in: path
          description: uuid of document to update/replace
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid4
      requestBody:
        $ref: '#/components/requestBodies/Document'
      responses:
        "400":
          description: Invalid uuid supplied
        "404":
          description: document not found
        "405":
          description: Validation exception
      x-openapi-router-controller: api.controllers.documents_controller
    delete:
      tags:
        - documents
      summary: Deletes a document
      operationId: delete_document_by_uuid
      parameters:
        - name: uuid
          in: path
          description: uuid of document to delete
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid4
      responses:
        "400":
          description: Invalid uuid supplied
        "404":
          description: document not found
      x-openapi-router-controller: api.controllers.documents_controller
  /v1/user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: create_user
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
      x-openapi-router-controller: api.controllers.user_controller
  /v1/user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: create_users_with_array_input
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
      x-openapi-router-controller: api.controllers.user_controller
  /v1/user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: create_users_with_list_input
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
      x-openapi-router-controller: api.controllers.user_controller
  /v1/user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: login_user
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
            application/xml:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
      x-openapi-router-controller: api.controllers.user_controller
  /v1/user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logout_user
      responses:
        default:
          description: successful operation
      x-openapi-router-controller: api.controllers.user_controller
  /v1/user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: get_user_by_name
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      x-openapi-router-controller: api.controllers.user_controller
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: update_user
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
      x-openapi-router-controller: api.controllers.user_controller
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: delete_user
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      x-openapi-router-controller: api.controllers.user_controller
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      example:
        firstName: firstName
        lastName: lastName
        password: password
        userStatus: 6
        phone: phone
        id: 0
        email: email
        username: username
      xml:
        name: User
    Contact:
      required:
        - first_name
        - last_name
        - email
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        title:
          type: string
        office_phone:
          type: string
        mobile_phone:
          type: string
        email:
          type: string
          format: email
        notes:
          type: string
        active:
          type: boolean
          default: true
    Customer:
      type: object
      properties:
        _id:
          type: string
        uuid:
          type: string
          format: uuid4
        name:
          type: string
        identifier:
          type: string
        customer_type:
          type: string
        industry:
          type: string
        sector:
          type: string
        critical_infrastructure:
          type: string
        address_1:
          type: string
        address_2:
          type: string
        city:
          type: string
        state:
          type: string
        zip_code:
          type: string
        domain:
          type: string
        appendix_a_date:
          type: string
          format: date
        contact_list:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
      example:
        name: test customer 2
        identifier: test identifier 2
        address_1: 1234 Test Lane
        address_2: 4567 Second Dr.
        city: Test
        state: LA
        zip_code: '12344'
        customer_type: Federal
        industry: Oil & Gas
        sector: Oil & Gas
        domain: test.com
        critical_infrastructure: Energy Sector
        appendix_a_date: 2022-4-14
        contact_list:
          - first_name: Contact
            last_name: Test
            title: Owner
            office_phone: 888-888-8888
            mobile_phone: 777-777-7777
            email: test@test.com
            notes: test notes
            active: true
            name: Test1
        xml:
          name: Customer
    Assessment:
      required:
        - customer_uuid
        - name
        - uuid
      type: object
      properties:
        uuid:
          type: string
          format: uuid4
        customer_uuid:
          type: string
          format: uuid4
        name:
          type: string
        description:
          type: string
      example:
        uuid: uuid
      xml:
        name: Assessment
    Template:
      type: object
      properties:
        uuid:
          type: string
          format: uuid4
        name:
          type: string
        description:
          type: string
        sender_profile_id:
          type: string
        landing_page_id:
          type: string
        deception_score:
          type: integer
        from_address:
          type: string
        retired:
          type: boolean
        retired_description:
          type: string
        sophisticated:
          type: string
        red_flag:
          type: string
        subject:
          type: string
        text:
          type: string
        html:
          type: string
        recommendation_type:
          type: string
        campaigns:
          type: array
          items:
            type: string
        indicators:
          type: array
          items:
            type: string
      example:
        name: "Order Details"
        description: "Contains fake order tracking information."
        sender_profile_id: "some-fake-id"
        deception_score: 1
      xml:
        name: Template
    Campaign:
      type: object
      properties:
        uuid:
          type: string
          description: uuid string value
          format: uuid4
          example: a4b545e7-2fec-49a9-a3f4-3528dd7cbed2
        assessment_uuid:
          type: string
          format: uuid4
          example: a4b545e7-2fec-49a9-a3f4-3528dd7cbed3
        name:
          type: string
        description:
          type: string
        target_template_uuid:
          type: string
          description: uuid of associated template
          format: uuid4
          example: a4b545e7-2fec-49a9-a3f4-3528dd7cbed4
        email_template_uuid:
          type: string
          description: uuid of associated template
          format: uuid4
          example: a4b545e7-2fec-49a9-a3f4-3528dd7cbed5
        status:
          type: string
          description: campaign status in the data store
          enum:
            - queued
            - running
            - completed
        start_datetime:
          type: string
          format: datetime
        end_datetime:
          type: string
          format: datetime
      example:
        assessment_uuid: a4b545e7-2fec-49a9-a3f4-3528dd7cbed3
        email_template_uuid: a4b545e7-2fec-49a9-a3f4-3528dd7cbed5
        uuid: a4b545e7-2fec-49a9-a3f4-3528dd7cbed2
        target_template_uuid: a4b545e7-2fec-49a9-a3f4-3528dd7cbed4
        status: queued
      xml:
        name: Campaign
    HeaderSchema:
      properties:
        key:
          type: string
        value:
          type: string
    Sending_Profile:
      required:
        - name
        - landing_page_domain
      type: object
      properties:
        uuid:
          type: string
          format: uuid64
        name:
          type: string
        interface_type:
          type: string
        from_address:
          type: string
          format: email
        headers:
          type: array
          items:
            $ref: '#/components/schemas/HeaderSchema'
        landing_page_domain:
          type: string
        sending_ips:
          type: string
        smtp_username:
          type: string
        smtp_password:
          type: string
        smtp_host:
          type: string
        mailgun_domain:
          type: string
        mailgun_api_key:
          type: string
        ses_role_arn:
          type: string
    Document:
      required:
        - description
        - file_name
        - parent_uuid
        - uuid
      type: object
      properties:
        uuid:
          type: string
          format: uuid4
        description:
          type: string
        parent_uuid:
          type: string
          description: uuid for parent association
          format: uuid4
        file_name:
          type: string
          format: binary
      example:
        parent_uuid: parent_uuid
        file_name: ""
        description: description
        uuid: uuid
      xml:
        name: Document
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    Customer:
      required: true
      description: Customer object to be added to data store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Customer'
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Customer'
        application/xml:
          schema:
            $ref: '#/components/schemas/Customer'
    Assessment:
      description: Assessment object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Assessment'
        application/xml:
          schema:
            $ref: '#/components/schemas/Assessment'
      required: true
    Campaign:
      description: Campaign object to be added to data store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Campaign'
        application/xml:
          schema:
            $ref: '#/components/schemas/Campaign'
    Template:
      description: Campaign object to be added to data store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Template'
        application/xml:
          schema:
            $ref: '#/components/schemas/Template'
    Sending_Profile:
      description: Sending Profile to be added to the data store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Sending_Profile'
        application/xml:
          schema:
            $ref: '#/components/schemas/Sending_Profile'
    Document:
      description: Document object to be added to data store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Document'
        application/xml:
          schema:
            $ref: '#/components/schemas/Document'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      required: true
