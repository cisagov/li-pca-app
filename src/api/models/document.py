# coding: utf-8
"""Customer Model."""

from __future__ import absolute_import

# cisagov Libraries
from api import util
from api.models.base_model_ import Model

# from datetime import date, datetime  # noqa: F401
# from typing import Dict, List  # noqa: F401


class Document(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        uuid: str = None,
        description: str = None,
        parent_uuid: str = None,
        file_name: str = None,
    ):  # noqa: E501
        """Initialize Document model defined in Swagger.

        :param uuid: The uuid of this Document.
        :type uuid: str
        :param description: The description of this Document.
        :type descriptuuuuion: str
        :param parent_uuid: The parent_uuid of this Document.
        :type parent_uuid: str
        :param file_name: The file_name of this Document.
        :type file_name: str
        """
        self.swagger_types = {
            "uuid": str,
            "description": str,
            "parent_uuid": str,
            "file_name": str,
        }

        self.attribute_map = {
            "uuid": "uuid",
            "description": "description",
            "parent_uuid": "parent_uuid",
            "file_name": "file_name",
        }
        self._uuid = uuid
        self._description = description
        self._parent_uuid = parent_uuid
        self._file_name = file_name

    @classmethod
    def from_dict(cls, dikt) -> "Document":
        """Return the dict as a model.

        :param dikt: A dict.
        :type: dict
        :return: The Document of this Document.  # noqa: E501
        :rtype: Document
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self) -> str:
        """Get the uuid of this Document.

        :return: The uuid of this Document.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Set the uuid of this Document.

        :param uuid: The uuid of this Document.
        :type uuid: str
        """
        if uuid is None:
            raise ValueError(
                "Invalid value for `uuid`, must not be `None`"
            )  # noqa: E501

        self._uuid = uuid

    @property
    def description(self) -> str:
        """Get the description of this Document.

        :return: The description of this Document.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Set the description of this Document.

        :param description: The description of this Document.
        :type description: str
        """
        if description is None:
            raise ValueError(
                "Invalid value for `description`, must not be `None`"
            )  # noqa: E501

        self._description = description

    @property
    def parent_uuid(self) -> str:
        """Get the parent_uuid of this Document.

        uuid for parent association  # noqa: E501

        :return: The parent_uuid of this Document.
        :rtype: str
        """
        return self._parent_uuid

    @parent_uuid.setter
    def parent_uuid(self, parent_uuid: str):
        """Set the parent_uuid of this Document.

        uuid for parent association  # noqa: E501

        :param parent_uuid: The parent_uuid of this Document.
        :type parent_uuid: str
        """
        if parent_uuid is None:
            raise ValueError(
                "Invalid value for `parent_uuid`, must not be `None`"
            )  # noqa: E501

        self._parent_uuid = parent_uuid

    @property
    def file_name(self) -> str:
        """Get the file_name of this Document.

        :return: The file_name of this Document.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name: str):
        """Set the file_name of this Document.

        :param file_name: The file_name of this Document.
        :type file_name: str
        """
        if file_name is None:
            raise ValueError(
                "Invalid value for `file_name`, must not be `None`"
            )  # noqa: E501

        self._file_name = file_name
