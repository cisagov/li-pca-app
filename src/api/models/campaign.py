# coding: utf-8
"""Customer Model"""

from __future__ import absolute_import

# cisagov Libraries
from api import util
from api.models.base_model_ import Model

# from datetime import date, datetime  # noqa: F401
# from typing import Dict, List  # noqa: F401


class Campaign(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        uuid: str = None,
        assessment_uuid: str = None,
        target_template_uuid: str = None,
        email_template_uuid: str = None,
        status: str = None,
    ):  # noqa: E501
        """Campaign - a model defined in Swagger

        :param uuid: The uuid of this Campaign.  # noqa: E501
        :type uuid: str
        :param assessment_uuid: The assessment_uuid of this Campaign.  # noqa: E501
        :type assessment_uuid: str
        :param target_template_uuid: The target_template_uuid of this Campaign.  # noqa: E501
        :type target_template_uuid: str
        :param email_template_uuid: The email_template_uuid of this Campaign.  # noqa: E501
        :type email_template_uuid: str
        :param status: The status of this Campaign.  # noqa: E501
        :type status: str
        """
        self.swagger_types = {
            "uuid": str,
            "assessment_uuid": str,
            "target_template_uuid": str,
            "email_template_uuid": str,
            "status": str,
        }

        self.attribute_map = {
            "uuid": "uuid",
            "assessment_uuid": "assessment_uuid",
            "target_template_uuid": "target_template_uuid",
            "email_template_uuid": "email_template_uuid",
            "status": "status",
        }
        self._uuid = uuid
        self._assessment_uuid = assessment_uuid
        self._target_template_uuid = target_template_uuid
        self._email_template_uuid = email_template_uuid
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> "Campaign":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Campaign of this Campaign.  # noqa: E501
        :rtype: Campaign
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self) -> str:
        """Gets the uuid of this Campaign.

        uuid string value  # noqa: E501

        :return: The uuid of this Campaign.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this Campaign.

        uuid string value  # noqa: E501

        :param uuid: The uuid of this Campaign.
        :type uuid: str
        """
        if uuid is None:
            raise ValueError(
                "Invalid value for `uuid`, must not be `None`"
            )  # noqa: E501

        self._uuid = uuid

    @property
    def assessment_uuid(self) -> str:
        """Gets the assessment_uuid of this Campaign.


        :return: The assessment_uuid of this Campaign.
        :rtype: str
        """
        return self._assessment_uuid

    @assessment_uuid.setter
    def assessment_uuid(self, assessment_uuid: str):
        """Sets the assessment_uuid of this Campaign.


        :param assessment_uuid: The assessment_uuid of this Campaign.
        :type assessment_uuid: str
        """
        if assessment_uuid is None:
            raise ValueError(
                "Invalid value for `assessment_uuid`, must not be `None`"
            )  # noqa: E501

        self._assessment_uuid = assessment_uuid

    @property
    def target_template_uuid(self) -> str:
        """Gets the target_template_uuid of this Campaign.

        uuid of associated template  # noqa: E501

        :return: The target_template_uuid of this Campaign.
        :rtype: str
        """
        return self._target_template_uuid

    @target_template_uuid.setter
    def target_template_uuid(self, target_template_uuid: str):
        """Sets the target_template_uuid of this Campaign.

        uuid of associated template  # noqa: E501

        :param target_template_uuid: The target_template_uuid of this Campaign.
        :type target_template_uuid: str
        """

        self._target_template_uuid = target_template_uuid

    @property
    def email_template_uuid(self) -> str:
        """Gets the email_template_uuid of this Campaign.

        uuid of associated template  # noqa: E501

        :return: The email_template_uuid of this Campaign.
        :rtype: str
        """
        return self._email_template_uuid

    @email_template_uuid.setter
    def email_template_uuid(self, email_template_uuid: str):
        """Sets the email_template_uuid of this Campaign.

        uuid of associated template  # noqa: E501

        :param email_template_uuid: The email_template_uuid of this Campaign.
        :type email_template_uuid: str
        """

        self._email_template_uuid = email_template_uuid

    @property
    def status(self) -> str:
        """Gets the status of this Campaign.

        campaign status in the data store  # noqa: E501

        :return: The status of this Campaign.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Campaign.

        campaign status in the data store  # noqa: E501

        :param status: The status of this Campaign.
        :type status: str
        """
        allowed_values = ["queued", "running", "completed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({}), must be one of {}".format(
                    status, allowed_values
                )
            )

        self._status = status
